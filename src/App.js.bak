import React, { useState, useRef, useEffect } from "react";
import styled, { keyframes } from "styled-components";

const MENU_LIST = [
  "汉堡", "披萨", "寿司", "火锅", "炸鸡", "牛排", "沙拉", "面条", "烤肉", "煎饼", "饺子", "蛋糕", "三明治", "千层面", "炸鱼薯条", "Fish and Chips", "烧烤"
];

// 菜单闪烁动画
const flash = keyframes`
  0% { opacity: 0; transform: scale(1.5); color: transparent; text-shadow: 0 0 5px rgba(0,0,0,.5); }
  50% { opacity: 1; }
  100% { opacity: 0; transform: scale(0.5); }
`;

const Wrapper = styled.div`
  min-height: 100vh;
  width: 100vw;
  background: #f5f6f7;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const MainArea = styled.div`
  position: relative;
  width: 100vw;
  height: 100vh;
  background: #e9e9e9;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
`;

const BgArea = styled.div`
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  background: #e9e9e9;
  z-index: 0;
`;

const TempContainer = styled.div`
  transform: translate3d(0, 0, 0);
  overflow: hidden;
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  z-index: 1;
`;

const CenterBox = styled.div`
  position: absolute;
  width: 90%;
  max-width: 640px;
  left: 50%; 
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 3;
  text-align: center;
`;

const CenterTitle = styled.h1`
  margin: 0 0 30px;
  padding: 0;
  font-weight: 400;
  font-size: 32px;
  color: #333;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  position: relative;
  min-height: 48px;
  
  .what {
    font-weight: 700;
    color: #111;
  }
`;

const MainButton = styled.div`
  background: rgba(0, 0, 0, 0.1);
  border-radius: 40px;
  padding: 5px;
  box-shadow: inset 0 2px 3px rgba(0, 0, 0, 0.07), 0 1px rgba(255, 255, 255, 0.5);
  display: inline-block;
  cursor: pointer;
  
  span {
    border-radius: 35px;
    width: 180px;
    height: 60px;
    line-height: 60px;
    background: linear-gradient(to bottom, #ffba30, #ff911e);
    color: #fff;
    text-align: center;
    display: block;
    font-size: 32px;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    box-shadow: inset 0 1px #ffd17c, 0 2px 3px rgba(0, 0, 0, 0.2);
    border: 1px solid #e88e1d;
    transition: background 0.2s, box-shadow 0.2s;
  }
  
  &:hover span {
    background: linear-gradient(to bottom, #ffce44, #ffa532);
    box-shadow: inset 0 1px #ffe696, 0 2px 3px rgba(0, 0, 0, 0.2);
  }
  
  &:active span {
    background: linear-gradient(to bottom, #ff911e, #ffbb30);
    box-shadow: inset 0 1px #ffb050, 0 2px 3px rgba(0, 0, 0, 0.2);
  }
`;

const HistoryContainer = styled.div`
  position: absolute;
  bottom: 30px;
  left: 0;
  width: 100%;
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 10px;
  padding: 0 20px;
  z-index: 4;
`;

const HistoryItem = styled.div`
  padding: 5px 15px;
  background: linear-gradient(to bottom, #ffba30, #ff911e);
  border-radius: 20px;
  color: #fff;
  font-size: 16px;
  font-weight: 500;
`;

// 生成随机值
function getRandom(min, max) {
  return Math.random() * (max - min) + min;
}

export default function App() {
  // 状态：init 初始，running 抽奖中，stopped 已定格
  const [status, setStatus] = useState('init');
  const [mainMenu, setMainMenu] = useState('');
  const [history, setHistory] = useState([]);
  const tempContainerRef = useRef(null);
  const timerRef = useRef();
  const flashTimerRef = useRef();

  // 添加闪烁菜单项
  const addFlashMenuItem = () => {
    if (!tempContainerRef.current || status !== 'running') return;
    
    const left = getRandom(5, 90);
    const top = getRandom(10, 80);
    const size = getRandom(22, 38);
    const menuText = MENU_LIST[Math.floor(Math.random() * MENU_LIST.length)];
    
    const menuItem = document.createElement('div');
    menuItem.className = 'temp-menu-item';
    menuItem.style.position = 'absolute';
    menuItem.style.top = top + '%';
    menuItem.style.left = left + '%';
    menuItem.style.color = '#777';
    menuItem.style.fontSize = size + 'px';
    menuItem.style.opacity = '0';
    menuItem.style.animation = 'flash 1.6s ease-out both';
    menuItem.style.whiteSpace = 'nowrap';
    menuItem.textContent = menuText;
    
    tempContainerRef.current.appendChild(menuItem);
    
    // 动画结束后移除元素
    setTimeout(() => {
      if (menuItem.parentNode) {
        menuItem.parentNode.removeChild(menuItem);
      }
    }, 1600);
  };

  // 开始抽奖
  const startSelection = () => {
    setStatus('running');
    setMainMenu(MENU_LIST[Math.floor(Math.random() * MENU_LIST.length)]);
  };

  // 控制背景菜单闪烁
  useEffect(() => {
    if (status === 'running') {
      // 定期添加新的闪烁菜单项
      flashTimerRef.current = setInterval(addFlashMenuItem, 200);
    } else {
      clearInterval(flashTimerRef.current);
    }
    
    return () => clearInterval(flashTimerRef.current);
  }, [status]);

  // 控制中心菜单变换
  useEffect(() => {
    if (status === 'running') {
      timerRef.current = setInterval(() => {
        const randomMenu = MENU_LIST[Math.floor(Math.random() * MENU_LIST.length)];
        setMainMenu(randomMenu);
      }, 100);
    } else {
      clearInterval(timerRef.current);
    }
    
    return () => clearInterval(timerRef.current);
  }, [status]);

  // 保存历史记录
  useEffect(() => {
    if (status === 'stopped' && mainMenu) {
      const newHistory = [mainMenu, ...history.slice(0, 9)]; // 最多保存10条记录
      setHistory(newHistory);
    }
  }, [status, mainMenu]);

  // 按钮点击逻辑
  const handleBtn = () => {
    if (status === 'init') {
      startSelection();
    } else if (status === 'running') {
      setStatus('stopped');
    } else {
      // 点击"再来一次"，直接开始新一轮
      startSelection();
    }
  };

  // 添加CSS动画样式
  useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      @keyframes flash {
        0% { opacity: 0; transform: scale(1.5); color: transparent; text-shadow: 0 0 5px rgba(0,0,0,.5); }
        50% { opacity: 1; }
        100% { opacity: 0; transform: scale(0.5); }
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  return (
    <Wrapper>
      <MainArea>
        <BgArea />
        
        <TempContainer ref={tempContainerRef} />
        
        <CenterBox>
          <CenterTitle>
            {status === 'init' && (
              <>
                <b className="what">今天吃什么</b>？
              </>
            )}
            {status !== 'init' && (
              <>{mainMenu}</>
            )}
          </CenterTitle>
          
          <MainButton onClick={handleBtn}>
            <span>
              {status === 'init' ? '开始' : status === 'running' ? '停止' : '再来一次'}
            </span>
          </MainButton>
        </CenterBox>
        
        {history.length > 0 && (
          <HistoryContainer>
            {history.map((item, index) => (
              <HistoryItem key={index}>{item}</HistoryItem>
            ))}
          </HistoryContainer>
        )}
      </MainArea>
    </Wrapper>
  );
}

